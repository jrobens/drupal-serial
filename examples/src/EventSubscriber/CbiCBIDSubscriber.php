<?php

namespace Drupal\cbi_cbid\EventSubscriber;

use Drupal\core_event_dispatcher\Event\Entity\EntityInsertEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityPresaveEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityUpdateEvent;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\serial\Event\Serial\SerialSetEvent;
use Drupal\serial\Event\SerialEventDispatcherInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\StringTranslation\StringTranslationTrait;
use Drupal\hook_event_dispatcher\HookEventDispatcherInterface;

/**
 * Copy the CBID to the title. The CBID is generated by the _serial_ module.
 */
class CbiCBIDSubscriber implements EventSubscriberInterface {

  use StringTranslationTrait;

  protected EntityTypeManagerInterface $entityTypeManager;

  public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    $this->entityTypeManager = $entity_type_manager;
  }

  public static function getSubscribedEvents(): array {
    return [
      HookEventDispatcherInterface::ENTITY_PRE_SAVE => 'setEntityPreSave',
      HookEventDispatcherInterface::ENTITY_INSERT => 'setEntityInsert',
      HookEventDispatcherInterface::ENTITY_UPDATE => 'setEntityUpdate',
      SerialEventDispatcherInterface::SERIAL => 'setTitle',
    ];
  }

  /**
   * Set the title to the CBID.
   *
   * @param Drupal\serial\Event\Serial $event
   */
  public function setTitle(SerialSetEvent $event) {
    $cbid = $event->getValue();

    // Now a paragraph - Drupal\paragraphs\Entity\Paragraph
    $bond = $event->getEntity();

    if (is_null($cbid) || empty($cbid)) {
      $cbid = 1;
    }
   // if ($bond instanceof Paragraph) {
    $node = \Drupal::routeMatch()->getParameter('node');
      $parent = $this->getParagraphParent($bond);
      //  $bond->setTitle($cbid);
   // }
  }

  // Too late
  public function setEntityPreSave(EntityPresaveEvent $event) {
    $me = $event;
  }

  public function setEntityInsert(EntityInsertEvent $event) {
    $bond =  $event->getEntity();
   $parent = $this->getParagraphParent($bond);
/*    if ($bond instanceof Paragraph) {
      $parent = $bond->getParentEntity();
    }*/
  //  $bond->setTitle($cbid);

  }
  public function setEntityUpdate(EntityUpdateEvent $event) {
    $bond = $event->getEntity();
  }

  protected function getParagraphParent(Paragraph $entity) {
    return $entity->getParentEntity();
}
// ENTITY_CREATE
}
